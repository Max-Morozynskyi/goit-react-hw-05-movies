{"version":3,"file":"static/js/48.58df61c1.chunk.js","mappings":"iTAEMA,EAAW,+BACXC,EAAU,mCACVC,EAAmB,WACvB,IAAMC,EAAQC,OAAOC,aAAaC,QAAQ,YAC1C,OAAOH,EAAQI,KAAKC,MAAML,GAAS,OACpC,EAEYM,EAAiB,mCAAG,oGACbC,EAAAA,EAAAA,IAAA,UACbV,EADa,wCAC2BC,IAFd,cACzBU,EADyB,yBAIxBA,EAAIC,MAJoB,2CAAH,qDAOjBC,EAAe,mCAAG,WAAOC,EAAOC,GAAd,kFACvBC,EAAcF,EAAMG,OACpBC,EAAOhB,IAFgB,SAMXQ,EAAAA,EAAAA,IAAA,UAAaV,EAAb,iBAAsC,CACtDmB,OAAQ,CACNC,QAASnB,EACTa,MAAOE,EACPK,SAAUH,EACVH,KAAMA,EACNO,eAAe,KAZU,cAMvBX,EANuB,yBAetBA,EAAIC,MAfkB,2CAAH,wDAkBfW,EAAY,mCAAG,WAAMC,GAAN,gFACpBN,EAAOhB,IADa,SAMRQ,EAAAA,EAAAA,IAAA,UAAaV,EAAb,kBAA+BwB,GAAY,CAC3DL,OAAQ,CACNC,QAASnB,EACToB,SAAUH,KATY,cAMpBP,EANoB,yBAYnBA,EAAIC,MAZe,2CAAH,sDAeZa,EAAe,mCAAG,WAAMD,GAAN,gFACvBN,EAAOhB,IADgB,SAMXQ,EAAAA,EAAAA,IAAA,UAAaV,EAAb,kBAA+BwB,EAA/B,YAAmD,CACnEL,OAAQ,CACNC,QAASnB,EACToB,SAAUH,EACVH,KAAM,KAVmB,cAMvBJ,EANuB,yBAatBA,EAAIC,MAbkB,2CAAH,sDAgBfc,EAAe,mCAAG,WAAMF,GAAN,gFACvBN,EAAOhB,IADgB,SAMXQ,EAAAA,EAAAA,IAAA,UAAaV,EAAb,kBAA+BwB,EAA/B,YAAmD,CACnEL,OAAQ,CACNC,QAASnB,EACToB,SAAUH,KATe,cAMvBP,EANuB,yBAYtBA,EAAIC,MAZkB,2CAAH,qD,qIC/Dfe,EAAYC,EAAAA,EAAAA,GAAH,kEAKTC,EAAWD,EAAAA,EAAAA,GAAH,uJAURE,EAAeF,EAAAA,EAAAA,GAAH,+O,+JCdnBG,GAAaH,EAAAA,EAAAA,GAAOI,IAAPJ,CAAH,qmBAkCHK,EAAa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAClC,OACE,SAACJ,EAAD,CACEK,WAAW,MACXC,UAAU,IACVC,aAAcH,EACdI,mBAAoB,EACpBC,UAAWN,EACXO,cAAc,IACdC,sBAAuB,MAG5B,E,2DCgED,EA/Fe,WAAO,IAAD,EACnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAiCjB,OAhBAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRzC,EAAW,UAAGqC,EAAaK,IAAI,gBAApB,QAAgC,GAE7B,KAAhB1C,IAGJmC,GAAa,IACbtC,EAAAA,EAAAA,IAAgBG,EAAa8B,GAC1Ba,MAAK,SAAA/C,GACJqC,EAAgBrC,GAChBmC,EAAenC,EAAKG,KACrB,IACA6C,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IACTG,QAAQb,GAAa,IACzB,GAAE,CAACE,EAAcP,KAGhB,UAAC,KAAD,YACE,SAAC,KAAD,sCAEA,UAAC,KAAD,CAAYmB,SA3BK,SAAAC,GACnBA,EAAIC,iBACJb,EAAgB,CAAExC,MAAO8B,IACzBC,EAAe,IACfE,EAAe,EAChB,EAsBG,WACE,SAAC,KAAD,CACEqB,KAAK,cACLC,KAAK,OACLC,aAAa,MACbnE,MAAOyC,EACP2B,SAzCiB,SAAAL,GACvBrB,EAAeqB,EAAIM,cAAcrE,MAClC,EAwCOsE,WAAS,EACTC,YAAY,mBAEd,UAAC,KAAD,CAAeL,KAAK,SAApB,WACE,SAAC,MAAD,CAAUM,KAAK,KAAKC,MAAM,aAC1B,SAAC,IAAD,2BAGH1B,IAAa,SAAC2B,EAAA,EAAD,IACoB,KAAjC,UAAA7B,EAAa8B,eAAb,eAAsBC,UACrB,kEAAwC1B,EAAaK,IACnD,SADF,sCAIuB,IAAxBV,EAAa+B,QAAgD,IAAhC/B,EAAa8B,QAAQC,SACjD,4BACE,SAAC,KAAD,UACG/B,EAAa8B,QAAQE,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,YACtC,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAM/B,GAAlC,WACE,gBACEgC,IACEJ,EAAW,yCAC2BA,GAClCK,EAENC,IAAKR,KAEP,SAAC,KAAD,UAAaA,QAVEC,EActB,OAEH,SAACjD,EAAD,CACEC,MAAOc,EAAa0C,YACpBvD,WA3ES,SAAA+B,GACjBnB,EAAemB,EAAIyB,SAAW,EAC/B,SA+EF,C,2OC7GYC,EAAYhE,EAAAA,EAAAA,KAAH,kEAKTiE,EAAkBjE,EAAAA,EAAAA,GAAH,2CAIfkE,EAAkBlE,EAAAA,EAAAA,MAAH,yRAgBfmE,EAAcnE,EAAAA,EAAAA,KAAH,6MAYXoE,EAAgBpE,EAAAA,EAAAA,OAAH,oRAebqE,EAAarE,EAAAA,EAAAA,KAAH,yMAWVsE,EAAatE,EAAAA,EAAAA,EAAH,0H","sources":["components/Api/MovieApi.jsx","pages/Home/Home.styled.jsx","components/Pagination/Pagination.jsx","pages/Movies/Movies.jsx","pages/Movies/Movies.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '321ca123fc0a63a77ea7b403d8c1a88c';\nconst selectedLanguage = () => {\n  const value = window.localStorage.getItem('language');\n  return value ? JSON.parse(value) : 'en-US';\n};\n\nexport const getTrendingMovies = async () => {\n  const res = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n  );\n  return res.data;\n};\n\nexport const getMovieByQuery = async (query, page) => {\n  const searchQuery = query.trim();\n  const lang = selectedLanguage();\n  // const res = await axios.get(\n  //   `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  // );\n  const res = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n      language: lang,\n      page: page,\n      include_adult: false,\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieById = async movie_id => {\n  const lang = selectedLanguage();\n\n  // const res = await axios.get(\n  //   `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  // );\n  const res = await axios.get(`${BASE_URL}/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n      language: lang,\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const lang = selectedLanguage();\n\n  // const res = await axios.get(\n  //   `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  // );\n  const res = await axios.get(`${BASE_URL}/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: lang,\n      page: 1,\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const lang = selectedLanguage();\n\n  // const res = await axios.get(\n  //   `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n  // );\n  const res = await axios.get(`${BASE_URL}/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: lang,\n    },\n  });\n  return res.data;\n};\n","import styled from '@emotion/styled';\n\nexport const HomeTitle = styled.h2`\n  text-align: center;\n  margin: 20px 0;\n`;\n\nexport const FilmList = styled.ul`\n  max-width: 100vw;\n  margin-bottom: 20px;\n\n  display: flex;\n  gap: 15px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const FilmListItem = styled.li`\n  cursor: pointer;\n  max-width: 400px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 15px -3px,\n    rgba(0, 0, 0, 0.05) 0px 4px 6px -2px;\n  transition: transform 500ms;\n  :hover {\n    transform: scale(1.05);\n  }\n`;\n","import styled from '@emotion/styled';\nimport ReactPaginate from 'react-paginate';\n\nconst MyPaginate = styled(ReactPaginate)`\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 10px;\n  list-style-type: none;\n  padding: 0 5rem;\n  li a {\n    border-radius: 7px;\n    padding: 0.1rem 1rem;\n    border: gray 1px solid;\n    cursor: pointer;\n  }\n  li.previous a,\n  li.next a,\n  li.break a {\n    border-color: transparent;\n  }\n  li.selected a {\n    background-color: #0366d6;\n    border-color: transparent;\n    color: white;\n    min-width: 32px;\n  }\n  li.disabled a {\n    color: grey;\n  }\n  li.disable,\n  li.disabled a {\n    cursor: default;\n  }\n`;\n\nexport const Pagination = ({ pages, changePage }) => {\n  return (\n    <MyPaginate\n      breakLabel=\"...\"\n      nextLabel=\">\"\n      onPageChange={changePage}\n      pageRangeDisplayed={3}\n      pageCount={pages}\n      previousLabel=\"<\"\n      renderOnZeroPageCount={null}\n    />\n  );\n};\n","import { getMovieByQuery } from 'components/Api/MovieApi';\nimport { useEffect, useState } from 'react';\nimport { ImSearch } from 'react-icons/im';\nimport { Pagination } from '../../components/Pagination/Pagination';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport {\n  Container,\n  MovieTitle,\n  MoviesFormTitle,\n  SearchForm,\n  SearchFormBtn,\n  SearchFormInput,\n  SubmitLabel,\n} from './Movies.styled';\nimport { FilmList, FilmListItem } from 'pages/Home/Home.styled';\nimport { Preloader } from 'components/Preloader/Preloader';\nimport imgPoster from '../../img/img_404.jpg';\n\nconst Movies = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchedData, setSearchedData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const handleNameChange = evt => {\n    setSearchValue(evt.currentTarget.value);\n  };\n\n  const handlePage = evt => {\n    setCurrentPage(evt.selected + 1);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: searchValue });\n    setSearchValue('');\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    const searchQuery = searchParams.get('query') ?? '';\n\n    if (searchQuery === '') {\n      return;\n    }\n    setIsLoading(true);\n    getMovieByQuery(searchQuery, currentPage)\n      .then(data => {\n        setSearchedData(data);\n        setCurrentPage(data.page);\n      })\n      .catch(err => console.log(err))\n      .finally(setIsLoading(false));\n  }, [searchParams, currentPage]);\n\n  return (\n    <Container>\n      <MoviesFormTitle>Enter the movie title:</MoviesFormTitle>\n\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          name=\"searchValue\"\n          type=\"text\"\n          autoComplete=\"off\"\n          value={searchValue}\n          onChange={handleNameChange}\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <SearchFormBtn type=\"submit\">\n          <ImSearch size=\"20\" color=\"#616157\" />\n          <SubmitLabel>Search</SubmitLabel>\n        </SearchFormBtn>\n      </SearchForm>\n      {isLoading && <Preloader />}\n      {searchedData.results?.length === 0 && (\n        <div>{`Nothing found on your request \"${searchParams.get(\n          'query'\n        )}\". Try to search something else!`}</div>\n      )}\n      {searchedData.length !== 0 && searchedData.results.length !== 0 && (\n        <div>\n          <FilmList>\n            {searchedData.results.map(({ title, id, poster_path }) => {\n              return (\n                <FilmListItem key={id}>\n                  <Link to={`${id}`} state={{ from: location }}>\n                    <img\n                      src={\n                        poster_path\n                          ? `https://image.tmdb.org/t/p/w400${poster_path}`\n                          : imgPoster\n                      }\n                      alt={title}\n                    />\n                    <MovieTitle>{title}</MovieTitle>\n                  </Link>\n                </FilmListItem>\n              );\n            })}\n          </FilmList>\n          <Pagination\n            pages={searchedData.total_pages}\n            changePage={handlePage}\n          />\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default Movies;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.main`\n  margin: 20px auto;\n  padding: 0 40px;\n`;\n\nexport const MoviesFormTitle = styled.h2`\n  margin: 20px 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  background-color: #ffffe6;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const SubmitLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  background-color: #e0e0ca;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 500px;\n  margin-bottom: 30px;\n  background-color: #ffffe6;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const MovieTitle = styled.p`\n  display: block;\n  padding: 15px;\n  color: #616157;\n  text-align: center;\n  font-size: 20px;\n`;\n"],"names":["BASE_URL","API_KEY","selectedLanguage","value","window","localStorage","getItem","JSON","parse","getTrendingMovies","axios","res","data","getMovieByQuery","query","page","searchQuery","trim","lang","params","api_key","language","include_adult","getMovieById","movie_id","getMovieReviews","getMovieCredits","HomeTitle","styled","FilmList","FilmListItem","MyPaginate","ReactPaginate","Pagination","pages","changePage","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","pageCount","previousLabel","renderOnZeroPageCount","useState","searchValue","setSearchValue","currentPage","setCurrentPage","searchedData","setSearchedData","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","get","then","catch","err","console","log","finally","onSubmit","evt","preventDefault","name","type","autoComplete","onChange","currentTarget","autoFocus","placeholder","size","color","Preloader","results","length","map","title","id","poster_path","to","state","from","src","imgPoster","alt","total_pages","selected","Container","MoviesFormTitle","SearchFormInput","SubmitLabel","SearchFormBtn","SearchForm","MovieTitle"],"sourceRoot":""}